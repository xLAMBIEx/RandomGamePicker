<Application x:Class="RandomGamePicker.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:shell="clr-namespace:System.Windows.Shell;assembly=PresentationFramework"
             xmlns:local="clr-namespace:RandomGamePicker"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <!--<Style x:Key="PrimaryButton" TargetType="Button">
            <Setter Property="Margin" Value="4"/>
            <Setter Property="Padding" Value="10,6"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
        </Style>

        -->
        <!-- Watermark / Placeholder style for TextBox (WPF doesn't have PlaceholderText) -->
        <!--
        <Style x:Key="WatermarkTextBox" TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"/>
                            <TextBlock Margin="6,0"
                                    IsHitTestVisible="False"
                                    Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                    Text="{TemplateBinding Tag}"
                                    VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

        <Color x:Key="Bg0">#0B0D12</Color>
        <Color x:Key="Bg1">#121520</Color>
        <Color x:Key="Bg2">#1A1F2E</Color>
        <Color x:Key="Bg3">#20263A</Color>
        <Color x:Key="Border">#2B3350</Color>
        <Color x:Key="TextPrimary">#E6E9F0</Color>
        <Color x:Key="TextSecondary">#B5BDD3</Color>
        <Color x:Key="Accent">#5865F2</Color>

        <Color x:Key="AccentHover">#6F79F7</Color>
        <Color x:Key="AccentPressed">#4C58D6</Color>
        <Color x:Key="Danger">#ED4245</Color>

        <SolidColorBrush x:Key="BrushBg0" Color="{StaticResource Bg0}"/>
        <SolidColorBrush x:Key="BrushBg1" Color="{StaticResource Bg1}"/>
        <SolidColorBrush x:Key="BrushBg2" Color="{StaticResource Bg2}"/>
        <SolidColorBrush x:Key="BrushBg3" Color="{StaticResource Bg3}"/>
        <SolidColorBrush x:Key="BrushBorder" Color="{StaticResource Border}"/>
        <SolidColorBrush x:Key="BrushText" Color="{StaticResource TextPrimary}"/>
        <SolidColorBrush x:Key="BrushTextDim" Color="{StaticResource TextSecondary}"/>
        <SolidColorBrush x:Key="BrushAccent" Color="{StaticResource Accent}"/>
        <SolidColorBrush x:Key="BrushAccentHover" Color="{StaticResource AccentHover}"/>
        <SolidColorBrush x:Key="BrushAccentPressed" Color="{StaticResource AccentPressed}"/>
        <SolidColorBrush x:Key="BrushDanger" Color="{StaticResource Danger}"/>

        <!--<x:Double x:Key="CornerRadius">10</x:Double>
   <x:Double x:Key="ControlHeight">34</x:Double>-->
        <FontFamily x:Key="UiFont">Segoe UI Variable, Segoe UI, Inter, Roboto</FontFamily>

        <DropShadowEffect x:Key="SoftShadow" Color="#000000" BlurRadius="16" ShadowDepth="0" Opacity="0.3"/>

        <Style x:Key="PrimaryButton" TargetType="Button">
            <Setter Property="FontFamily" Value="{StaticResource UiFont}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="{StaticResource BrushAccent}"/>
            <Setter Property="Height" Value="34"/>
            <Setter Property="Padding" Value="14,0"/>
            <Setter Property="MinWidth" Value="100"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="root"
                           Background="{TemplateBinding Background}"
                           CornerRadius="10"
                           BorderBrush="{StaticResource BrushBorder}"
                           BorderThickness="0.5">
                            <ContentPresenter Margin="8,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="root" Property="Background" Value="{StaticResource BrushAccentHover}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="root" Property="Background" Value="{StaticResource BrushAccentPressed}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                                <Setter TargetName="root" Property="Effect" Value="{x:Null}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="GhostButton" TargetType="Button" BasedOn="{StaticResource PrimaryButton}">
            <Setter Property="Foreground" Value="{StaticResource BrushText}"/>
            <Setter Property="Background" Value="{StaticResource BrushBg2}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BrushBorder}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="root"
                           Background="{TemplateBinding Background}"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           BorderThickness="1"
                           CornerRadius="10">
                            <ContentPresenter Margin="8,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="root" Property="Background" Value="{StaticResource BrushBg3}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="root" Property="Background" Value="#161B2A"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="WatermarkTextBox" TargetType="TextBox">
            <Setter Property="FontFamily" Value="{StaticResource UiFont}"/>
            <Setter Property="Foreground" Value="{StaticResource BrushText}"/>
            <Setter Property="Background" Value="{StaticResource BrushBg2}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BrushBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Height" Value="34"/>
            <Setter Property="Padding" Value="10,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="border"
                           Background="{TemplateBinding Background}"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           BorderThickness="{TemplateBinding BorderThickness}"
                           CornerRadius="10">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" Margin="2"/>
                                <TextBlock x:Name="Watermark"
                                      Text="{TemplateBinding Tag}"
                                      Foreground="{StaticResource BrushTextDim}"
                                      IsHitTestVisible="False"
                                      Margin="12,0,8,0"
                                      VerticalAlignment="Center"
                                      Visibility="Collapsed"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Text" Value=""/>
                                    <Condition Property="IsKeyboardFocused" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Watermark" Property="Visibility" Value="Visible"/>
                            </MultiTrigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BrushAccent}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.6"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="CheckBox">
            <Setter Property="FontFamily" Value="{StaticResource UiFont}"/>
            <Setter Property="Foreground" Value="{StaticResource BrushText}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <StackPanel Orientation="Horizontal" Margin="0,0,6,0">
                            <Border x:Name="box" Width="18" Height="18"
                               CornerRadius="4"
                               Background="{StaticResource BrushBg2}"
                               BorderBrush="{StaticResource BrushBorder}"
                               BorderThickness="1"
                               Margin="0,0,8,0"/>
                            <ContentPresenter VerticalAlignment="Center"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="box" Property="Background" Value="{StaticResource BrushBg3}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="box" Property="Background" Value="{StaticResource BrushAccent}"/>
                                <Setter TargetName="box" Property="BorderBrush" Value="{StaticResource BrushAccent}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ToggleSwitch" TargetType="CheckBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Grid Width="44" Height="24">
                            <!-- Track -->
                            <Border x:Name="Track" CornerRadius="12"
                  Background="{StaticResource BrushBg2}"
                  BorderBrush="{StaticResource BrushBorder}"
                  BorderThickness="1"/>
                            <Border x:Name="Thumb"
                                    Width="18" Height="18"
                                    CornerRadius="9"
                                    Background="{StaticResource BrushText}"
                                    Margin="3"
                                    HorizontalAlignment="Left"  
                                    VerticalAlignment="Center">
                                <Border.Effect>
                                    <DropShadowEffect Color="#000000" BlurRadius="6" ShadowDepth="0" Opacity="0.35"/>
                                </Border.Effect>
                            </Border>

                        </Grid>

                        <!-- 1) Declare resources FIRST -->
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="SlideOn">
                                <ThicknessAnimation Storyboard.TargetName="Thumb"
                      Storyboard.TargetProperty="Margin"
                      To="23,3,3,3"
                      Duration="0:0:0.12">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                            <Storyboard x:Key="SlideOff">
                                <ThicknessAnimation Storyboard.TargetName="Thumb"
                      Storyboard.TargetProperty="Margin"
                      To="3,3,3,3"
                      Duration="0:0:0.12">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </ControlTemplate.Resources>

                        <!-- 2) Then reference them -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Track" Property="Background" Value="{StaticResource BrushBg3}"/>
                            </Trigger>

                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Track" Property="Background" Value="{StaticResource BrushAccent}"/>
                                <Setter TargetName="Track" Property="BorderBrush" Value="{StaticResource BrushAccent}"/>
                                <Setter TargetName="Thumb" Property="Background" Value="White"/>
                                <Setter TargetName="Thumb" Property="Margin" Value="23,3,3,3"/>
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>

                            <EventTrigger RoutedEvent="ToggleButton.Checked">
                                <BeginStoryboard Storyboard="{StaticResource SlideOn}"/>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                                <BeginStoryboard Storyboard="{StaticResource SlideOff}"/>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="RoundedHeaderStyle" TargetType="DataGridColumnHeader"
       BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="DataGridColumnHeader">
                        <Border Background="{TemplateBinding Background}"
                        BorderBrush="{StaticResource BrushBorder}"
                        BorderThickness="0 0 0 1"
                        CornerRadius="8,8,0,0"  
                            Padding="8,6">
                            <ContentPresenter VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="DataGrid">
            <Setter Property="FontFamily" Value="{StaticResource UiFont}"/>
            <Setter Property="Background" Value="{StaticResource BrushBg1}"/>
            <Setter Property="Foreground" Value="{StaticResource BrushText}"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="GridLinesVisibility" Value="None"/>
            <Setter Property="RowBackground" Value="{StaticResource BrushBg1}"/>
            <Setter Property="AlternatingRowBackground" Value="#141926"/>
            <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource BrushBorder}"/>
            <Setter Property="VerticalGridLinesBrush" Value="{StaticResource BrushBorder}"/>
            <Setter Property="SelectionMode" Value="Extended"/>
            <Setter Property="RowHeight" Value="34"/>

            <Setter Property="CellStyle">
                <Setter.Value>
                    <Style TargetType="DataGridCell">
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Padding" Value="8,0,8,0"/>
                        <Setter Property="Background" Value="{x:Null}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="DataGridCell">
                                    <Border x:Name="cell" Background="{TemplateBinding Background}">
                                        <ContentPresenter VerticalAlignment="Center" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="cell" Property="Background" Value="#293255"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="cell" Property="Background" Value="#202945"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="ColumnHeaderStyle">
                <Setter.Value>
                    <Style TargetType="DataGridColumnHeader" BasedOn="{StaticResource RoundedHeaderStyle}">
                        <Setter Property="Foreground" Value="{StaticResource BrushTextDim}"/>
                        <Setter Property="Background" Value="{StaticResource BrushBg3}"/>
                        <Setter Property="FontWeight" Value="SemiBold"/>
                        <Setter Property="BorderBrush" Value="{StaticResource BrushBorder}"/>
                        <Setter Property="BorderThickness" Value="0 0 0 1"/>
                        <Setter Property="Padding" Value="8,6"/>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 1) Geometry for the arrow glyphs -->
        <Geometry x:Key="ArrowTriangleGeometry">M0,10 L10,0 L20,10 Z</Geometry>

        <!-- 2) Map the template’s colors to your palette -->
        <SolidColorBrush x:Key="BrushScrollBarBackground" Color="Transparent"/>
        <!-- track bg -->
        <SolidColorBrush x:Key="BrushScrollBarButtonsBackground" Color="{Binding Source={StaticResource BrushBg2}, Path=Color}"/>
        <SolidColorBrush x:Key="BrushScrollBarButtonsBackgroundHover" Color="{Binding Source={StaticResource BrushBg3}, Path=Color}"/>
        <SolidColorBrush x:Key="BrushScrollBarButtonsForeground" Color="{Binding Source={StaticResource BrushTextDim}, Path=Color}"/>
        <SolidColorBrush x:Key="BrushScrollBarButtonsForegroundHover" Color="{Binding Source={StaticResource BrushText}, Path=Color}"/>

        <!-- Thumb colors -->
        <SolidColorBrush x:Key="BrushScrollBarThumb" Color="{Binding Source={StaticResource BrushBorder}, Path=Color}"/>
        <SolidColorBrush x:Key="BrushScrollBarThumbHover" Color="{Binding Source={StaticResource BrushBg3}, Path=Color}"/>
        <SolidColorBrush x:Key="BrushScrollBarThumbDrag" Color="{Binding Source={StaticResource BrushAccent}, Path=Color}"/>

        <!-- 3) Your template, with only those DynamicResource keys referenced -->
        <Style TargetType="ScrollBar">
            <!-- base settings -->
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="12"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Background" Value="{DynamicResource BrushScrollBarBackground}"/>

            <!-- Vertical template -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollBar">
                        <Grid Background="{DynamicResource BrushScrollBarBackground}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <!-- Up -->
                            <RepeatButton x:Name="PART_LineUpButton"
                                  Command="ScrollBar.LineUpCommand"
                                  Height="12"
                                  Background="{DynamicResource BrushScrollBarButtonsBackground}"
                                  BorderThickness="0"
                                  Grid.Row="0">
                                <Viewbox Stretch="Uniform">
                                    <Path x:Name="PART_LineUpGlyph" Data="{StaticResource ArrowTriangleGeometry}"
                                  Fill="{DynamicResource BrushScrollBarButtonsForeground}"/>
                                </Viewbox>
                            </RepeatButton>

                            <!-- Track + Thumb -->
                            <Track x:Name="PART_Track"
                           Grid.Row="1"
                           Orientation="Vertical"
                           IsDirectionReversed="True"
                           Minimum="{TemplateBinding Minimum}"
                           Maximum="{TemplateBinding Maximum}"
                           ViewportSize="{TemplateBinding ViewportSize}"
                           Value="{TemplateBinding Value}">
                                <Track.Thumb>
                                    <Thumb x:Name="PART_Thumb"
                                   Background="{DynamicResource BrushScrollBarThumb}"
                                   Margin="2"
                                   MinHeight="10"
                                   MinWidth="10"
                                   Focusable="True">
                                        <Thumb.Template>
                                            <ControlTemplate TargetType="Thumb">
                                                <Border Background="{TemplateBinding Background}" CornerRadius="6"/>
                                            </ControlTemplate>
                                        </Thumb.Template>
                                    </Thumb>
                                </Track.Thumb>
                            </Track>

                            <!-- Down -->
                            <RepeatButton x:Name="PART_LineDownButton"
                                  Command="ScrollBar.LineDownCommand"
                                  Height="12"
                                  Background="{DynamicResource BrushScrollBarButtonsBackground}"
                                  BorderThickness="0"
                                  Grid.Row="2">
                                <Viewbox Stretch="Uniform">
                                    <Path x:Name="PART_LineDownGlyph" Data="{StaticResource ArrowTriangleGeometry}"
                                  Fill="{DynamicResource BrushScrollBarButtonsForeground}">
                                        <Path.RenderTransform>
                                            <RotateTransform Angle="180" CenterX="10" CenterY="5"/>
                                        </Path.RenderTransform>
                                    </Path>
                                </Viewbox>
                            </RepeatButton>
                        </Grid>

                        <!-- States -->
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="PART_Thumb" Property="IsMouseOver" Value="True">
                                <Setter TargetName="PART_Thumb" Property="Background" Value="{DynamicResource BrushScrollBarThumbHover}"/>
                            </Trigger>
                            <Trigger SourceName="PART_Thumb" Property="IsDragging" Value="True">
                                <Setter TargetName="PART_Thumb" Property="Background" Value="{DynamicResource BrushScrollBarThumbDrag}"/>
                            </Trigger>

                            <Trigger SourceName="PART_LineDownButton" Property="IsMouseOver" Value="True">
                                <Setter TargetName="PART_LineDownButton" Property="Background" Value="{DynamicResource BrushScrollBarButtonsBackgroundHover}"/>
                                <Setter TargetName="PART_LineDownGlyph" Property="Fill" Value="{DynamicResource BrushScrollBarButtonsForegroundHover}"/>
                            </Trigger>
                            <Trigger SourceName="PART_LineUpButton" Property="IsMouseOver" Value="True">
                                <Setter TargetName="PART_LineUpButton" Property="Background" Value="{DynamicResource BrushScrollBarButtonsBackgroundHover}"/>
                                <Setter TargetName="PART_LineUpGlyph" Property="Fill" Value="{DynamicResource BrushScrollBarButtonsForegroundHover}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <!-- Horizontal template -->
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="12"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ScrollBar">
                                <Grid Background="{DynamicResource BrushScrollBarBackground}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <!-- Left -->
                                    <RepeatButton x:Name="PART_LineUpButton"
                                          Command="ScrollBar.LineLeftCommand"
                                          Width="12"
                                          Background="{DynamicResource BrushScrollBarButtonsBackground}"
                                          BorderThickness="0"
                                          Grid.Column="0">
                                        <Viewbox Stretch="Uniform">
                                            <Path x:Name="PART_LineUpGlyph" Data="{StaticResource ArrowTriangleGeometry}"
                                          Fill="{DynamicResource BrushScrollBarButtonsForeground}">
                                                <Path.RenderTransform>
                                                    <RotateTransform Angle="270" CenterX="10" CenterY="5"/>
                                                </Path.RenderTransform>
                                            </Path>
                                        </Viewbox>
                                    </RepeatButton>

                                    <!-- Track + Thumb -->
                                    <Track x:Name="PART_Track"
                                   Grid.Column="1"
                                   Orientation="Horizontal"
                                   Minimum="{TemplateBinding Minimum}"
                                   Maximum="{TemplateBinding Maximum}"
                                   ViewportSize="{TemplateBinding ViewportSize}"
                                   Value="{TemplateBinding Value}">
                                        <Track.Thumb>
                                            <Thumb x:Name="PART_Thumb"
                                           Background="{DynamicResource BrushScrollBarThumb}"
                                           Margin="2"
                                           MinHeight="10"
                                           MinWidth="10"
                                           Focusable="True">
                                                <Thumb.Template>
                                                    <ControlTemplate TargetType="Thumb">
                                                        <Border Background="{TemplateBinding Background}" CornerRadius="6"/>
                                                    </ControlTemplate>
                                                </Thumb.Template>
                                            </Thumb>
                                        </Track.Thumb>
                                    </Track>

                                    <!-- Right -->
                                    <RepeatButton x:Name="PART_LineDownButton"
                                          Command="ScrollBar.LineRightCommand"
                                          Width="12"
                                          Background="{DynamicResource BrushScrollBarButtonsBackground}"
                                          BorderThickness="0"
                                          Grid.Column="2">
                                        <Viewbox Stretch="Uniform">
                                            <Path x:Name="PART_LineDownGlyph" Data="{StaticResource ArrowTriangleGeometry}"
                                          Fill="{DynamicResource BrushScrollBarButtonsForeground}">
                                                <Path.RenderTransform>
                                                    <RotateTransform Angle="90" CenterX="10" CenterY="5"/>
                                                </Path.RenderTransform>
                                            </Path>
                                        </Viewbox>
                                    </RepeatButton>
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <Trigger SourceName="PART_Thumb" Property="IsMouseOver" Value="True">
                                        <Setter TargetName="PART_Thumb" Property="Background" Value="{DynamicResource BrushScrollBarThumbHover}"/>
                                    </Trigger>
                                    <Trigger SourceName="PART_Thumb" Property="IsDragging" Value="True">
                                        <Setter TargetName="PART_Thumb" Property="Background" Value="{DynamicResource BrushScrollBarThumbDrag}"/>
                                    </Trigger>
                                    <Trigger SourceName="PART_LineDownButton" Property="IsMouseOver" Value="True">
                                        <Setter TargetName="PART_LineDownButton" Property="Background" Value="{DynamicResource BrushScrollBarButtonsBackgroundHover}"/>
                                        <Setter TargetName="PART_LineDownGlyph" Property="Fill" Value="{DynamicResource BrushScrollBarButtonsForegroundHover}"/>
                                    </Trigger>
                                    <Trigger SourceName="PART_LineUpButton" Property="IsMouseOver" Value="True">
                                        <Setter TargetName="PART_LineUpButton" Property="Background" Value="{DynamicResource BrushScrollBarButtonsBackgroundHover}"/>
                                        <Setter TargetName="PART_LineUpGlyph" Property="Fill" Value="{DynamicResource BrushScrollBarButtonsForegroundHover}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- Titlebar button styles -->
        <Style x:Key="TitleBtnBase" TargetType="Button">
            <Setter Property="Width" Value="40"/>
            <Setter Property="Height" Value="28"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource BrushTextDim}"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="bg" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="{StaticResource BrushText}" />
                                <Setter TargetName="bg" Property="Background" Value="#22283A"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="bg" Property="Background" Value="#1A2031"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TitleBtnClose" TargetType="Button" BasedOn="{StaticResource TitleBtnBase}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="bg" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="bg" Property="Background" Value="#ED4245"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="bg" Property="Background" Value="#C43A3D"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
            <!-- Palette -->
            <Setter Property="Background" Value="{StaticResource BrushBg0}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BrushBg1}"/>
            <Setter Property="Foreground" Value="{StaticResource BrushText}"/>
            <Setter Property="BorderThickness" Value="1"/>

            <!-- Fully custom chrome -->
            <Setter Property="WindowStyle" Value="None"/>
            <Setter Property="ResizeMode" Value="CanResize"/>
            <Setter Property="AllowsTransparency" Value="False"/>

            <!-- IMPORTANT: no OS caption at all -->
            <Setter Property="shell:WindowChrome.WindowChrome">
                <Setter.Value>
                    <shell:WindowChrome
        CaptionHeight="32"           
                        ResizeBorderThickness="6"
        CornerRadius="0"
        GlassFrameThickness="1,0,0,0"
        UseAeroCaptionButtons="False"/>
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                            <DockPanel>

                                <!-- Title bar (client area) -->
                                <Grid x:Name="TitleBar"
                  Height="32"
                  Background="{StaticResource BrushBg1}"
                  DockPanel.Dock="Top"
                  SnapsToDevicePixels="True">

                                    <!-- 2) Left: icon + title -->
                                    <StackPanel Orientation="Horizontal"
                          Margin="8,0,0,0"
                          VerticalAlignment="Center">
                                        <Image Source="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}"
                       Width="14" Height="14" Opacity="0.85" Margin="0,0,6,0"/>
                                        <TextBlock Text="{Binding Title, RelativeSource={RelativeSource TemplatedParent}}"
                           Foreground="{StaticResource BrushTextDim}"
                           FontSize="13"
                           VerticalAlignment="Center"/>
                                    </StackPanel>

                                    <!-- 3) Right: window buttons (normal client controls) -->
                                    <StackPanel Orientation="Horizontal"
                          HorizontalAlignment="Right"
                          Panel.ZIndex="2">
                                        <!-- Minimize -->
                                        <Button Style="{StaticResource TitleBtnBase}"
                        Command="{x:Static SystemCommands.MinimizeWindowCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                                 shell:WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Path Data="M0,0 L10,0" StrokeThickness="2"
                        Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                        </Button>

                                        <!-- Maximize -->
                                        <Button x:Name="BtnMax" Style="{StaticResource TitleBtnBase}"
                        Command="{x:Static SystemCommands.MaximizeWindowCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"  shell:WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Rectangle Width="10" Height="10" StrokeThickness="2"
                             Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                        </Button>

                                        <!-- Restore -->
                                        <Button x:Name="BtnRestore" Style="{StaticResource TitleBtnBase}"
                        Visibility="Collapsed"
                        Command="{x:Static SystemCommands.RestoreWindowCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"  shell:WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Grid Width="12" Height="12">
                                                <Rectangle StrokeThickness="2"
                               Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"
                               Margin="3,0,0,3"/>
                                                <Rectangle StrokeThickness="2"
                               Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"
                               Margin="0,3,3,0"/>
                                            </Grid>
                                        </Button>

                                        <!-- Close -->
                                        <Button Style="{StaticResource TitleBtnClose}"
                        Command="{x:Static SystemCommands.CloseWindowCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"  shell:WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Grid>
                                                <Line X1="0" Y1="0" X2="10" Y2="10" StrokeThickness="2" Stroke="White"/>
                                                <Line X1="0" Y1="10" X2="10" Y2="0" StrokeThickness="2" Stroke="White"/>
                                            </Grid>
                                        </Button>
                                    </StackPanel>

                                    <!-- Divider (under buttons) -->
                                    <Border Background="{StaticResource BrushBorder}"
                      Height="1" VerticalAlignment="Bottom" Opacity="0.8" Panel.ZIndex="1"/>
                                </Grid>

                                <!-- Client area -->
                                <Grid>
                                    <AdornerDecorator>
                                        <ContentPresenter/>
                                    </AdornerDecorator>
                                    <ResizeGrip x:Name="WindowResizeGrip"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Bottom"
                          Visibility="Collapsed"
                          IsTabStop="False"/>
                                </Grid>

                            </DockPanel>
                        </Border>

                        <!-- State triggers -->
                        <ControlTemplate.Triggers>
                            <!-- Swap Max/Restore -->
                            <Trigger Property="WindowState" Value="Maximized">
                                <Setter TargetName="BtnMax" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="BtnRestore" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="WindowState" Value="Normal">
                                <Setter TargetName="BtnMax" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="BtnRestore" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <!-- Optional: show classic grip if desired -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                    <Condition Property="WindowState" Value="Normal"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <!-- Avoid edge artifacts when maximized -->
            <Style.Triggers>
                <Trigger Property="WindowState" Value="Maximized">
                    <Setter Property="BorderThickness" Value="8"/>
                </Trigger>
                <Trigger Property="WindowState" Value="Normal">
                    <Setter Property="BorderThickness" Value="1"/>
                </Trigger>
            </Style.Triggers>
        </Style>



    </Application.Resources>
</Application>